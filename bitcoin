# -*- coding: utf-8 -*-
"""
Created on Thu Jan 27 02:37:08 2022

@author: LEE
"""

def get_balance(ticker):
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == ticker:
            if b['balance'] is not None:    
                return float(b['balance'])
            else:
                return 0


    
##half-half
#def half_half(Ticker):
import time
import pyupbit
import datetime
import key
import numpy as np
import pandas as pd
flag = "KRW"
a=0
b=0
z=0

while True:
    try:
        now = datetime.datetime.now()
        access = key.access_key
        secret = key.secret_key
        upbit = pyupbit.Upbit(access, secret)
        price_BTC = pyupbit.get_current_price("BTC-ETH")
        price_KRW = pyupbit.get_current_price(["KRW-BTC", "KRW-ETH", "KRW-XRP"])

        buy_price = float(format(upbit.get_amount('ALL')))*1.0005
        sell_price = float(pyupbit.get_current_price(["KRW-BTC"]))*float(format(upbit.get_balance(ticker="KRW-BTC")))*0.9995
        sell_cond = sell_price-buy_price
        
        num_count = 5


        ticker = "KRW-BTC"
        ticker_origin = "BTC"
        
        n = 0
        m=0
        k=0
        j=0
     
        
        df = pyupbit.get_ohlcv(ticker,interval="minute1",count=num_count)
        s_mid=(df['open']+df['close'])/2
        h_mid=(df['high']+df['low'])/2
        s=[]
        h=[]
        red=df['close']-df['open']  #양수면 빨강, 음수면 파랑
        
        plus = []
        minus = []
        

##매수 조건
        for i in list(range(1,num_count)):
            if (s_mid[-i]-s_mid[-i-1]<0):  #중점이 하락세
                n=n+1
            elif (s_mid[-i]-s_mid[-i-1]==0 and ((df['high'][-i]+df['low'][-i])/2) - ((df['high'][-i-1]+df['low'][-i-1])/2)<0):
                n=n+1
            elif (s_mid[-i]-s_mid[-i-1]==0 and ((df['high'][-i]+df['low'][-i])/2) - ((df['high'][-i-1]+df['low'][-i-1])/2)>0):
                m=m+1
            elif (red[-i]<0 and red[-i-1]<0 and s_mid[-i]-s_mid[-i-1]>=0):    #중점이 상승이지만 파,파 경우
                n=n+1
            elif (red[-i]<0 and red[-i-1]>0 and 0<s_mid[-i]-s_mid[-i-1]<5000):    #중점이 상승이여도 빨,파&미미
                n=n+1
            elif (red[-i]>0 and red[-i-1]<0 and 0<s_mid[-i]-s_mid[-i-1]<5000):    #중점이 상승이여도 파,빨&미미
                n=n+1
            elif (red[-i]>0 and red[-i-1]>0):                                   #중점 상승이면서 빨,빨
                m=m+1
            elif (red[-i]>0 and red[-i-1]<0 and s_mid[-i]-s_mid[-i-1]>=5000):   #중점 상승 이면서 파,빨&큰폭
                m=m+1
            elif (red[-i]<0 and red[-i-1]>0 and s_mid[-i]-s_mid[-i-1]>=5000):   #그 외 케이스(이상 현상)
                k=k+1
                
        for i in list(range(1,num_count)):
            if red[i]>0:
                j=j+1
                
        if (n==4):
                print("아직 하락중")
        elif (n==3 and m==1 and red[-1]>0 and red[-2]>0 and j<4 and float(format(upbit.get_balance(ticker="KRW")))>=6000):
            if (df['low'][-1]<df['low'][-2]):
                print("아직 하락중")
            elif (s_mid[-1]-df['low'][-1]>=35000):
                print("추가 데이터 필요")
            else:
                print(now)
                upbit.buy_market_order(ticker,get_balance("KRW")*0.9994)
                buy=buy_price
                print("매수가+수수료 : " , buy_price)
                print("매수가 : ", float(format(upbit.get_amount('ALL'))))
                print("수수료 : ", float(format(upbit.get_amount('ALL')))*0.0005)
        elif (n==3 and m==1 and red[-1]>0 and red[-2]<0 and s_mid[-1]-s_mid[-2]>=5000 and df['high'][-2]>s_mid[-1] and float(format(upbit.get_balance(ticker="KRW")))>=6000):
            if (df['high'][-1]-df['high'][-2]<-5000):
                print("추가 데이터 필요")
            else:
                print(now)
                upbit.buy_market_order(ticker,get_balance("KRW")*0.9994)
                buy=buy_price
                print(float(pyupbit.get_current_price(["KRW-BTC"])))
                print("매수가+수수료 : " , buy_price)
                print("매수가 : ", float(format(upbit.get_amount('ALL'))))
                print("수수료 : ", float(format(upbit.get_amount('ALL')))*0.0005)

                
        n=0
        m=0
        k=0
        j=0
        
##매도 조건
        for i in list(range(1,num_count)):
            if (s_mid[-i]-s_mid[-i-1]>0):                      #중점이 상승세
                n=n+1
            elif (s_mid[-i]-s_mid[-i-1]==0 and ((df['high'][-i]+df['low'][-i])/2) - ((df['high'][-i-1]+df['low'][-i-1])/2)>0):
                n=n+1
            elif (s_mid[-i]-s_mid[-i-1]==0 and ((df['high'][-i]+df['low'][-i])/2) - ((df['high'][-i-1]+df['low'][-i-1])/2)<0):
                m=m+1
            elif (red[-i]>0 and red[-i-1]>0 and s_mid[-i]-s_mid[-i-1]<0):     #중점이 하락이지만 빨,빨 경우
                n=n+1
            elif (red[-i]<0 and red[-i-1]>0 and -5000<s_mid[-i]-s_mid[-i-1]<0):  #중점이 하락이지만 빨,파 & 미미
                n=n+1
            elif (red[-i]>0 and red[-i-1]<0 and -5000<s_mid[-i]-s_mid[-i-1]<0):  #중점이 하락이지만 파,빨&미미
                n=n+1
            elif (red[-i]<=0 and red[-i-1]<=0 and s_mid[-i]-s_mid[-i-1]<0):        #중점이 하락이면서 파,파
                m=m+1
            elif (red[-i]<0 and red[-i-1]>0 and s_mid[-i]-s_mid[-i-1]<=-5000):   #중점 하락이면서 빨,파 &큰폭
                m=m+1
            elif (red[-i]>0 and red[-i-1]<0 and s_mid[-i]-s_mid[-i-1]<=-5000):   #중점 하락하면서 파,빨&큰폭
                k=k+1
               
                
        if (n==4):
                print("아직 상승중")
        elif (n==3 & m==1 and red[-1]<=0 and red[-2]<=0 and float(format(upbit.get_balance(ticker="KRW-BTC")))>0.0001 and sell_cond/buy_price>0.0005):
            print(now)                
            upbit.sell_market_order(ticker,get_balance(ticker_origin))
            print(sell_cond ,"원 수익.")
            print(sell_cond*100/buy_price,"% 수익")
            time.sleep(300)
        elif (n==3 and m==1 and red[-1]<0 and red[-2]>0 and s_mid[-1]-s_mid[-2]<=-5000 and float(format(upbit.get_balance(ticker="KRW-BTC")))>0.0001 and sell_cond/buy_price>0.0005):
            print(now)            
            upbit.sell_market_order(ticker,get_balance(ticker_origin))
            print(sell_cond ,"원 수익.")
            print(sell_cond*100/buy_price,"% 수익")
            time.sleep(300)
        elif (df['high'][-1]-df['low'][-1]>=150000 and float(format(upbit.get_balance(ticker="KRW-BTC")))>0.0001 and sell_cond/buy_price>0.0005):
            print(now)            
            upbit.sell_market_order(ticker,get_balance(ticker_origin))
            print(sell_cond ,"원 수익.")
            print(sell_cond*100/buy_price,"% 수익")
            time.sleep(300)
            

        n=0
        m=0
        k=0
              
        time.sleep(20)
        
    except Exception as e:
        print(e)
        time.sleep(1)
