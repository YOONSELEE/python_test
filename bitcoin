def get_balance(ticker):
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == ticker:
            if b['balance'] is not None:    
                return float(b['balance'])
            else:
                return 0


    
##half-half
#def half_half(Ticker):
import time
import pyupbit
import datetime
import key
import numpy as np
import pandas as pd
flag = "KRW"
l_low = 0
test_money=1000000
coin = 0
buy_price = 0

while True:
    try:
        now = datetime.datetime.now()
        access = key.access_key
        secret = key.secret_key
        upbit = pyupbit.Upbit(access, secret)
        price_BTC = pyupbit.get_current_price("BTC-ETH")
        price_KRW = pyupbit.get_current_price(["KRW-BTC", "KRW-ETH", "KRW-XRP"])

        
        sell_price = float(pyupbit.get_current_price(["KRW-BTC"]))*coin*0.9995
        sell_cond = sell_price-buy_price
        
        num_count = 5

        ticker = "KRW-BTC"
        ticker_origin = "BTC"
        
        n = 0
        m = 0
        mm=0
        k = 0
        j = 0
        q = 0
        
        df = pyupbit.get_ohlcv(ticker,interval="minute1",count=num_count)
        df2 = pyupbit.get_ohlcv(ticker,interval="minute1",count=15)
        s_mid=(df['open']+df['close'])/2
        h_mid=(df['high']+df['low'])/2
        gab=max(df2['high'])
        gab2=min(df2['low'])
        red=df['close']-df['open']  #양수면 빨강, 음수면 파랑

        

##매수 조건
        for i in list(range(1,num_count)):
            if (s_mid[-i]-s_mid[-i-1]<0):
                n=n+1   #중점이 하락시
            elif (s_mid[-i]-s_mid[-i-1]==0 and ((df['high'][-i]+df['low'][-i])/2) - ((df['high'][-i-1]+df['low'][-i-1])/2)<=0):
                n=n+1   #중점 같을경우 고점저점의 중점 같거나 하락시
            elif (s_mid[-1]-s_mid[-2]==0 and ((df['high'][-1]+df['low'][-2])/2) - ((df['high'][-2]+df['low'][-3])/2)>0 and red[-1]>0 and df['low'][-1]>=df['low'][-2] and df['high'][-1]>df['high'][-2]):
                m=m+1   #중점 같을 경우 고점저점의 중점 상승시 & 최근이 빨강일때
            elif (s_mid[-i]-s_mid[-i-1]>0):
                if (s_mid[-i]-s_mid[-i-1]<=5000):
                    n=n+1   #중점 미미하게 상승
                elif (df['low'][-i]<df['low'][-i-1] and red[-i]>0):
                    k=k+1   #중점 상승, 저점 하락, 마지막 빨강
                elif (df['low'][-i]<df['low'][-i-1] and red[-i]<=0):
                    n=n+1   #중점 상승, 저점 하락, 마지막 파랑 또는 -
                elif (df['low'][-i]>=df['low'][-i-1] and red[-i]<=0):
                    k=k+1   #중점 상승, 저점 같거나 상승, 마지막 파랑 또는 -
                elif (df['low'][-1]>=df['low'][-2] and df['high'][-1]>df['high'][-2] and red[-1]>0):
                    m=m+1
                elif (df['low'][-i]>=df['low'][-i-1] and red[-i]>0):
                    n=n+1

                
        for i in list(range(1,num_count)):
            if red[i]>0:
                j=j+1
        
        if (test_money>=6000):
            if (n==3 and m==1 and j<3):
                if (l_low==0):
                    l_low = s_mid[-2]
                elif (l_low>0 and l_low>=s_mid[-2]):
                    l_low=s_mid[-2]
                elif (l_low>0 and l_low<s_mid[-2]):
                    if (df['low'][-1]>df['low'][-2] and df['low'][-2]<df['low'][-3] and df['low'][-3]<df['low'][-4] and df['low'][-4]<df['low'][-5] and df['high'][-1]>df['high'][-2] and df['high'][-2]<df['high'][-3] and df['high'][-3]<df['high'][-4] and df['high'][-4]<df['high'][-5]):
                        print(now)
                        coin = test_money*0.9995/float(pyupbit.get_current_price(["KRW-BTC"]))  #구매코인
                        buy_price = test_money*0.9995*1.0005
                        test_money = test_money - buy_price    #한화 잔액
                        print("buy price+fee : " , buy_price)
                        print("buy price : ", coin*float(pyupbit.get_current_price(["KRW-BTC"])))
                        print("fee : ", coin*float(pyupbit.get_current_price(["KRW-BTC"]))*0.0005)
                        print("coin : ", coin)
                        print("호가",float(pyupbit.get_current_price(["KRW-BTC"])))
                    else:
                        l_low=s_mid[-2]
          
        n = 0
        m = 0
        k = 0
        j = 0
        
##매도 조건
        for i in list(range(1,num_count)):
            if (s_mid[-i]-s_mid[-i-1]>=0):
                n=n+1   #중점이 같거나 상승시
            elif (s_mid[-i]-s_mid[-i-1]<0): ## 중점 하락
                if (s_mid[-i]-s_mid[-i-1]>=-5000): ## 중점 미미하게 하락
                    n=n+1
                elif (s_mid[-i]-s_mid[-i-1]<-5000 and red[-i]>0):  #일정 이상 하락하면서 빨강
                    n=n+1
                elif (s_mid[-i]-s_mid[-i-1]<-5000 and red[-i]<=0):  #일정 이상 하락하면서 파랑,-
                    m=m+1
                    
        if (m>=1 and s_mid[-1]-s_mid[-2]<-5000 and red[-1]<=0):
            mm=1
        if (m>=1 and s_mid[-2]-s_mid[-3]<-5000 and red[-2]<=0):
            k=1
        if (m>=1 and s_mid[-3]-s_mid[-4]<-5000 and red[-3]<=0):
            k=1
        if (m>=1 and s_mid[-4]-s_mid[-5]<-5000 and red[-4]<=0):
            k=1
 
        for i in list(range(1,num_count)):
            if red[i]<0:
                q=q+1
                

        if (n==3 and mm==1 and coin>0.0001):
            if (sell_cond/buy_price>0.00025):
                print(now)              
                print(sell_cond ,"won up")
                print(sell_cond*100/buy_price,"% up")
                print("n=",n ,"m=",m,"k=",k,"q=",q,"mm=",mm)
                test_money = test_money + coin*float(pyupbit.get_current_price(["KRW-BTC"]))*0.9995
                coin = 0  
                time.sleep(300)
        elif (n==2 and mm==1 and k==1 and coin>0.0001):
              if (sell_cond/buy_price>0.00025):
                print(now)              
                print(sell_cond ,"won up")
                print(sell_cond*100/buy_price,"% up")
                print("n=",n ,"m=",m,"k=",k,"q=",q,"mm=",mm)
                test_money = test_money + coin*float(pyupbit.get_current_price(["KRW-BTC"]))*0.9995
                coin = 0  
                time.sleep(300)
        elif (df['high'][-1]-df['low'][-1]>=250000 and coin>0.0001):
              if (sell_cond/buy_price>0.00025):
                print(now)              
                print(sell_cond ,"won up")
                print(sell_cond*100/buy_price,"% up")
                print("n=",n ,"m=",m,"k=",k,"q=",q,"mm=",mm)
                test_money = test_money + coin*float(pyupbit.get_current_price(["KRW-BTC"]))*0.9995
                coin = 0  
                time.sleep(300)
            

        n=0
        m=0
        mm=0
        k=0
        q=0
        
        time.sleep(3)
       
    except Exception as e:
        print(e)
        time.sleep(1)
